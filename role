<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Role-Playing Tool (Enhanced)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        #chat-history::-webkit-scrollbar { width: 8px; }
        #chat-history::-webkit-scrollbar-track { background: #f1f5f9; }
        #chat-history::-webkit-scrollbar-thumb { background-color: #94a3b8; border-radius: 10px; border: 2px solid #f1f5f9; }
        .ai-thinking-dot { animation: bounce 1.4s infinite ease-in-out both; }
        .ai-thinking-dot:nth-child(1) { animation-delay: -0.32s; }
        .ai-thinking-dot:nth-child(2) { animation-delay: -0.16s; }
        @keyframes bounce { 0%, 80%, 100% { transform: scale(0); } 40% { transform: scale(1.0); } }
        .mic-active { color: #ef4444; }
    </style>
</head>
<body class="bg-slate-100 font-sans antialiased text-slate-800">
    
    <!-- Notification Element -->
    <div id="notification" class="hidden fixed top-5 right-5 bg-red-600 text-white py-3 px-5 rounded-lg shadow-xl z-50 transition-all duration-300 transform translate-x-full">
        <!-- Message will be injected here -->
    </div>

    <div id="app" class="container mx-auto p-4 max-w-4xl">

        <!-- Header -->
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-slate-700">AIロールプレイングツール</h1>
            <p class="text-slate-500 mt-2">音声対話とシナリオ作成で、より実践的なトレーニングを</p>
        </header>

        <!-- Screen: Scenario Selection -->
        <main id="screen-scenario-select">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <div class="flex justify-between items-center mb-6">
                    <div>
                        <h2 class="text-2xl font-bold mb-1">シナリオ選択</h2>
                        <p class="text-slate-600">トレーニングしたいシナリオを選んでください。</p>
                    </div>
                    <button id="show-create-scenario-btn" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                        <i class="fas fa-plus mr-2"></i>新しいシナリオを作成
                    </button>
                </div>
                <div id="scenario-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Scenarios will be injected here -->
                </div>
            </div>
        </main>

        <!-- Screen: Create Scenario -->
        <main id="screen-create-scenario" class="hidden">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-6">シナリオ作成</h2>
                <div class="space-y-4">
                    <div>
                        <label for="new-scenario-title" class="block text-sm font-medium text-slate-700">タイトル</label>
                        <input type="text" id="new-scenario-title" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500" placeholder="例：見込み客へのフォローアップ電話">
                    </div>
                    <div>
                        <label for="new-scenario-description" class="block text-sm font-medium text-slate-700">状況説明</label>
                        <textarea id="new-scenario-description" rows="2" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500" placeholder="例：先日デモを体験したお客様に、導入の意向を確認します。"></textarea>
                    </div>
                    <div>
                        <label for="new-scenario-persona" class="block text-sm font-medium text-slate-700">AIの役割（ペルソナ）</label>
                        <input type="text" id="new-scenario-persona" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500" placeholder="例：AIペルソナ: 導入に前向きだが、価格を気にしている担当者">
                    </div>
                    <div>
                        <label for="new-scenario-prompt" class="block text-sm font-medium text-slate-700">AIへの指示（システムプロンプト）</label>
                        <textarea id="new-scenario-prompt" rows="4" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500" placeholder="例：あなたは企業の担当者です。ユーザーからの電話を受けます。製品には魅力を感じていますが、価格がネックになっています。ユーザーに価格交渉を促すような質問をしてください。"></textarea>
                    </div>
                </div>
                <div class="mt-6 flex justify-end gap-4">
                    <button id="cancel-create-scenario-btn" class="bg-slate-300 hover:bg-slate-400 text-slate-800 font-bold py-2 px-4 rounded-lg transition-colors">キャンセル</button>
                    <button id="save-scenario-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">このシナリオを保存</button>
                </div>
            </div>
        </main>

        <!-- Screen: Role-Playing Interface -->
        <main id="screen-roleplay" class="hidden">
            <div class="bg-white p-4 sm:p-6 rounded-lg shadow-md">
                <div class="flex justify-between items-center border-b pb-4 mb-4">
                    <div>
                        <h2 id="roleplay-title" class="text-xl md:text-2xl font-bold"></h2>
                        <p id="roleplay-persona" class="text-slate-500"></p>
                    </div>
                    <button id="end-session-btn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                        <i class="fas fa-stop-circle mr-2"></i>終了する
                    </button>
                </div>
                <div id="chat-history" class="h-96 overflow-y-auto mb-4 p-4 bg-slate-50 rounded-lg">
                    <!-- Chat messages will appear here -->
                </div>
                <div id="ai-thinking-indicator" class="hidden flex items-center mb-4">
                     <div class="w-10 h-10 rounded-full bg-slate-200 flex items-center justify-center mr-3 flex-shrink-0"><i class="fas fa-robot text-slate-500"></i></div>
                    <div class="bg-slate-200 rounded-lg p-3 flex items-center">
                        <div class="ai-thinking-dot w-2 h-2 bg-slate-500 rounded-full mr-1"></div>
                        <div class="ai-thinking-dot w-2 h-2 bg-slate-500 rounded-full mr-1"></div>
                        <div class="ai-thinking-dot w-2 h-2 bg-slate-500 rounded-full"></div>
                    </div>
                </div>
                <div class="flex items-center">
                    <button id="mic-btn" class="text-slate-500 hover:text-blue-500 p-3 text-2xl transition-colors disabled:opacity-50 disabled:cursor-not-allowed"><i class="fas fa-microphone"></i></button>
                    <input type="text" id="chat-input" class="flex-grow border rounded-l-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="メッセージを入力、またはマイクをクリック...">
                    <button id="send-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-r-lg transition-colors">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </main>

        <!-- Screen: Feedback -->
        <main id="screen-feedback" class="hidden">
            <!-- Same as before -->
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-4 text-center">フィードバックレポート</h2>
                <div id="feedback-loading" class="text-center p-8">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-500"></i>
                    <p class="mt-4 text-slate-600">対話を分析しています...</p>
                </div>
                <div id="feedback-content" class="hidden"></div>
                <div class="mt-8 text-center">
                    <button id="restart-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-colors mr-4"><i class="fas fa-redo mr-2"></i>もう一度挑戦</button>
                    <button id="new-scenario-btn" class="bg-slate-500 hover:bg-slate-600 text-white font-bold py-2 px-6 rounded-lg transition-colors"><i class="fas fa-list-ul mr-2"></i>シナリオ選択へ</button>
                </div>
            </div>
        </main>

    </div>

    <script>
        // --- DOM Elements ---
        const screens = {
            scenarioSelect: document.getElementById('screen-scenario-select'),
            createScenario: document.getElementById('screen-create-scenario'),
            roleplay: document.getElementById('screen-roleplay'),
            feedback: document.getElementById('screen-feedback')
        };
        const notification = document.getElementById('notification');
        const showCreateScenarioBtn = document.getElementById('show-create-scenario-btn');
        const saveScenarioBtn = document.getElementById('save-scenario-btn');
        const cancelCreateScenarioBtn = document.getElementById('cancel-create-scenario-btn');
        const scenarioList = document.getElementById('scenario-list');
        const roleplayTitle = document.getElementById('roleplay-title');
        const roleplayPersona = document.getElementById('roleplay-persona');
        const chatHistory = document.getElementById('chat-history');
        const chatInput = document.getElementById('chat-input');
        const sendBtn = document.getElementById('send-btn');
        const micBtn = document.getElementById('mic-btn');
        const endSessionBtn = document.getElementById('end-session-btn');
        const aiThinkingIndicator = document.getElementById('ai-thinking-indicator');
        const feedbackLoading = document.getElementById('feedback-loading');
        const feedbackContent = document.getElementById('feedback-content');
        const restartBtn = document.getElementById('restart-btn');
        const newScenarioBtn = document.getElementById('new-scenario-btn');

        // --- Speech API ---
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = SpeechRecognition ? new SpeechRecognition() : null;
        if (recognition) {
            recognition.lang = 'ja-JP';
            recognition.interimResults = false;
        }
        const synth = window.speechSynthesis;

        // --- Scenarios Definition ---
        let scenarios = [
             {
                id: 'sales_initial_visit',
                title: '新規顧客への初回訪問（営業）',
                description: '自社の新しいSaaS製品を紹介するため、興味を持ってくれている企業の担当者と初めて面会します。',
                icon: 'fa-handshake',
                persona: 'AIペルソナ: 担当者（多忙だが協力的）',
                systemPrompt: `あなたは企業の担当者です。多忙ですが、新しいSaaS製品には興味があります。ユーザーは営業担当として、あなたに製品の魅力を伝えます。簡潔で分かりやすい説明を好み、具体的な導入メリットや価格について質問してください。ユーザーの対話が続くように、相槌や質問を投げかけてください。`,
                isCustom: false
            },
            {
                id: 'claim_handling',
                title: '製品不具合に関するクレーム対応',
                description: '購入した製品に不具合があったと、少し怒り気味のお客様から連絡がありました。状況をヒアリングし、対応を協議します。',
                icon: 'fa-phone-volume',
                persona: 'AIペルソナ: 顧客（不満・少し感情的）',
                systemPrompt: `あなたはこの会社の製品を購入した顧客です。製品に不具合があり、非常に困っており、少し怒っています。ユーザーはサポート担当として、あなたの話を聞きます。あなたはまず状況を感情的に訴えますが、ユーザーの対応が真摯であれば、徐々に冷静さを取り戻します。具体的な解決策を求めてください。`,
                isCustom: false
            },
            {
                id: '1on1_meeting',
                title: '部下との1on1ミーティング',
                description: '最近、少し元気がないように見える部下と1on1を行います。安心して話せる雰囲気を作り、現状の課題や悩みを引き出します。',
                icon: 'fa-users',
                persona: 'AIペルソナ: 部下（悩みがある・口が重い）',
                systemPrompt: `あなたはとある企業の社員です。最近、業務の量と責任が増したことで、少し疲れており、将来に漠然とした不安を感じています。ユーザーはあなたの上司です。あなたは自分から積極的に話すタイプではありませんが、上司が真摯に耳を傾け、安心できる雰囲気を作ってくれれば、少しずつ自分の気持ちを話そうとします。`,
                isCustom: false
            },
        ];

        // --- App State ---
        let currentScreen = 'scenarioSelect';
        let currentScenario = null;
        let conversationHistory = []; // Stores the history for API calls
        let isListening = false;
        
        // --- Functions ---
        
        function showNotification(message, duration = 5000) {
            notification.textContent = message;
            notification.classList.remove('hidden', 'translate-x-full');
            notification.classList.add('translate-x-0');
            setTimeout(() => {
                notification.classList.remove('translate-x-0');
                notification.classList.add('translate-x-full');
                // Allow transition to finish before hiding
                setTimeout(() => notification.classList.add('hidden'), 300);
            }, duration);
        }

        function showScreen(screenName) {
            Object.values(screens).forEach(screen => screen.classList.add('hidden'));
            screens[screenName].classList.remove('hidden');
            currentScreen = screenName;
        }

        function renderScenarios() {
            scenarioList.innerHTML = '';
            scenarios.forEach(scenario => {
                const card = document.createElement('div');
                card.className = 'bg-slate-50 hover:bg-slate-100 p-6 rounded-lg shadow-sm cursor-pointer transition-all duration-300 transform hover:scale-105 relative';
                card.innerHTML = `
                    ${scenario.isCustom ? '<span class="absolute top-2 right-2 text-xs bg-blue-500 text-white font-semibold py-1 px-2 rounded-full">自作</span>' : ''}
                    <div class="flex items-center mb-3">
                        <i class="fas ${scenario.icon || 'fa-comment-dots'} text-2xl text-blue-500 mr-4"></i>
                        <h3 class="text-lg font-bold text-slate-800">${scenario.title}</h3>
                    </div>
                    <p class="text-slate-600">${scenario.description}</p>
                `;
                card.addEventListener('click', () => startRoleplay(scenario));
                scenarioList.appendChild(card);
            });
        }
        
        function startRoleplay(scenario) {
            currentScenario = scenario;
            roleplayTitle.textContent = scenario.title;
            roleplayPersona.textContent = scenario.persona;
            chatHistory.innerHTML = '';
            conversationHistory = [{ role: 'system', parts: [{ text: scenario.systemPrompt }] }];
            
            const firstMessage = "こんにちは。本日はよろしくお願いいたします。";
            addMessageToChat('ai', firstMessage);
            conversationHistory.push({ role: 'model', parts: [{ text: firstMessage}] });
            speakText(firstMessage);

            showScreen('roleplay');
        }

        function addMessageToChat(sender, text) {
            const messageWrapper = document.createElement('div');
            messageWrapper.className = `flex items-start mb-4 ${sender === 'user' ? 'justify-end' : 'justify-start'}`;
            const iconClass = sender === 'user' ? 'fa-user' : 'fa-robot';
            const bgColor = sender === 'user' ? 'bg-blue-500 text-white' : 'bg-slate-200 text-slate-800';
            const iconBgColor = sender === 'user' ? 'bg-blue-200 text-blue-600' : 'bg-slate-200 text-slate-500';
            messageWrapper.innerHTML = `
                <div class="flex items-end ${sender === 'user' ? 'flex-row-reverse' : 'flex-row'}">
                    <div class="w-10 h-10 rounded-full flex items-center justify-center ${iconBgColor} flex-shrink-0">
                        <i class="fas ${iconClass}"></i>
                    </div>
                    <div class="p-3 rounded-lg max-w-sm md:max-w-md ${bgColor} ${sender === 'user' ? 'mr-3' : 'ml-3'}">
                        ${text}
                    </div>
                </div>
            `;
            chatHistory.appendChild(messageWrapper);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        async function handleSendMessage() {
            const userText = chatInput.value.trim();
            if (!userText) return;

            addMessageToChat('user', userText);
            conversationHistory.push({ role: 'user', parts: [{ text: userText }] });
            chatInput.value = '';
            aiThinkingIndicator.classList.remove('hidden');

            try {
                const payload = { 
                    contents: conversationHistory.filter(c => c.role !== 'system').map(c => ({ role: c.role === 'model' ? 'model' : 'user', parts: c.parts})),
                    systemInstruction: { parts: [{ text: currentScenario.systemPrompt }] }
                };
                
                const apiKey = ""; // Leave blank
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

                const result = await response.json();
                let aiText = "申し訳ありません、うまく応答できませんでした。";
                if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts.length > 0) {
                     aiText = result.candidates[0].content.parts[0].text;
                }

                addMessageToChat('ai', aiText);
                conversationHistory.push({ role: 'model', parts: [{ text: aiText }] });
                speakText(aiText);

            } catch (error) {
                console.error("Error calling Gemini API:", error);
                addMessageToChat('ai', "エラーが発生しました。しばらくしてから再度お試しください。");
            } finally {
                aiThinkingIndicator.classList.add('hidden');
            }
        }
        
        async function handleEndSession() {
            showScreen('feedback');
            feedbackContent.classList.add('hidden');
            feedbackLoading.classList.remove('hidden');

            try {
                const fullConversation = conversationHistory.slice(1).map(turn => `${turn.role === 'user' ? 'あなた' : 'AI'}: ${turn.parts[0].text}`).join('\n');
                const feedbackPrompt = `以下のロールプレイング対話ログを分析し、ユーザー（「あなた」）のコミュニケーションについて、プロのビジネス研修講師の視点からフィードバックレポートを作成してください。\n\n# シナリオ設定\n${currentScenario.title}\n${currentScenario.description}\n\n# 対話ログ\n${fullConversation}\n\n# 出力形式\n以下のJSON形式で、具体的な発言を引用しながら、客観的かつ建設的なフィードバックを生成してください。\n{\n    "overallScore": "S, A, B, C, Dの5段階評価",\n    "summary": "対話全体の総評（150字程度）",\n    "goodPoints": [\n        { "point": "良かった点（例：効果的な質問ができていた）", "example": "引用する具体的な発言" }\n    ],\n    "improvementPoints": [\n        { "point": "改善点（例：結論を先に話すとより伝わりやすい）", "example": "引用する具体的な発言" }\n    ]\n}`;

                const payload = { 
                    contents: [{ role: 'user', parts: [{ text: feedbackPrompt }] }],
                    generationConfig: { responseMimeType: "application/json" }
                };
                const apiKey = ""; // Leave blank
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

                const result = await response.json();
                if (result.candidates && result.candidates.length > 0) {
                     const feedbackData = JSON.parse(result.candidates[0].content.parts[0].text);
                     renderFeedback(feedbackData);
                } else {
                    throw new Error("フィードバックが生成されませんでした。");
                }
            } catch (error) {
                console.error("Error generating feedback:", error);
                feedbackContent.innerHTML = `<p class="text-center text-red-500">フィードバックの生成中にエラーが発生しました。</p>`;
            } finally {
                feedbackLoading.classList.add('hidden');
                feedbackContent.classList.remove('hidden');
            }
        }
        
        function renderFeedback(data) {
            const scoreColor = { 'S': 'text-purple-500', 'A': 'text-red-500', 'B': 'text-blue-500', 'C': 'text-yellow-600', 'D': 'text-gray-500' };
            const createPointList = (points, icon, color) => {
                if (!points || points.length === 0) return '<p class="text-slate-500">特にありません。</p>';
                return points.map(p => `
                    <div class="mb-4">
                        <p class="font-bold"><i class="fas ${icon} ${color} mr-2"></i>${p.point || ''}</p>
                        ${p.example ? `<p class="text-sm text-slate-600 bg-slate-100 p-2 rounded mt-1 border-l-4 border-slate-300">引用: 「${p.example}」</p>` : ''}
                    </div>`).join('');
            };
            feedbackContent.innerHTML = `
                <div class="text-center mb-6"><p class="text-lg text-slate-600">総合評価</p><p class="text-7xl font-black ${scoreColor[data.overallScore] || 'text-gray-700'}">${data.overallScore}</p></div>
                <div class="bg-slate-50 p-4 rounded-lg mb-6"><h3 class="font-bold text-lg mb-2"><i class="fas fa-comment-alt mr-2 text-slate-500"></i>総評</h3><p>${data.summary}</p></div>
                <div class="grid md:grid-cols-2 gap-6">
                    <div class="bg-green-50 p-4 rounded-lg"><h3 class="font-bold text-lg mb-4 text-green-700"><i class="fas fa-thumbs-up mr-2"></i>良かった点</h3>${createPointList(data.goodPoints, 'fa-check-circle', 'text-green-500')}</div>
                    <div class="bg-orange-50 p-4 rounded-lg"><h3 class="font-bold text-lg mb-4 text-orange-700"><i class="fas fa-bullseye mr-2"></i>改善できる点</h3>${createPointList(data.improvementPoints, 'fa-lightbulb', 'text-orange-500')}</div>
                </div>`;
        }
        
        // --- Scenario Management ---
        function saveCustomScenarios() {
            const customScenarios = scenarios.filter(s => s.isCustom);
            localStorage.setItem('ai-roleplay-custom-scenarios', JSON.stringify(customScenarios));
        }

        function loadCustomScenarios() {
            const saved = localStorage.getItem('ai-roleplay-custom-scenarios');
            if (saved) {
                const customScenarios = JSON.parse(saved);
                scenarios.push(...customScenarios);
            }
        }
        
        function handleSaveScenario() {
            const newScenario = {
                id: `custom_${Date.now()}`,
                title: document.getElementById('new-scenario-title').value.trim(),
                description: document.getElementById('new-scenario-description').value.trim(),
                persona: document.getElementById('new-scenario-persona').value.trim(),
                systemPrompt: document.getElementById('new-scenario-prompt').value.trim(),
                icon: 'fa-user-edit',
                isCustom: true
            };
            if (!newScenario.title || !newScenario.systemPrompt) {
                showNotification('「タイトル」と「AIへの指示」は必須です。');
                return;
            }
            scenarios.push(newScenario);
            saveCustomScenarios();
            renderScenarios();
            showScreen('scenarioSelect');
            // Clear form
            document.getElementById('new-scenario-title').value = '';
            document.getElementById('new-scenario-description').value = '';
            document.getElementById('new-scenario-persona').value = '';
            document.getElementById('new-scenario-prompt').value = '';
        }

        // --- Speech API Functions ---
        function speakText(text) {
            if (synth.speaking) {
                synth.cancel();
            }
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'ja-JP';
            synth.speak(utterance);
        }

        function handleMicClick() {
            if (isListening) {
                recognition.stop();
                return;
            }
            if (window.location.protocol !== 'https:') {
                showNotification('音声認識は安全な接続(HTTPS)でのみ利用可能です。');
                return;
            }
            recognition.start();
        }

        if(recognition){
            recognition.onstart = () => {
                isListening = true;
                micBtn.classList.add('mic-active');
            };
            recognition.onend = () => {
                isListening = false;
                micBtn.classList.remove('mic-active');
            };
            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                chatInput.value = transcript;
                setTimeout(() => handleSendMessage(), 200); // Send automatically after recognition
            };
            recognition.onerror = (event) => {
                console.error("Speech recognition error:", event.error);
                if (event.error === 'not-allowed') {
                    showNotification('マイクへのアクセスが許可されていません。ブラウザの設定を確認してください。');
                } else if (event.error === 'no-speech') {
                    showNotification('音声が検出されませんでした。もう一度お試しください。');
                } else {
                    showNotification(`音声認識エラーが発生しました: ${event.error}`);
                }
                isListening = false;
                micBtn.classList.remove('mic-active');
            };
        }

        // --- Event Listeners ---
        sendBtn.addEventListener('click', handleSendMessage);
        chatInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); handleSendMessage(); } });
        endSessionBtn.addEventListener('click', handleEndSession);
        restartBtn.addEventListener('click', () => startRoleplay(currentScenario));
        newScenarioBtn.addEventListener('click', () => showScreen('scenarioSelect'));
        showCreateScenarioBtn.addEventListener('click', () => showScreen('createScenario'));
        cancelCreateScenarioBtn.addEventListener('click', () => showScreen('scenarioSelect'));
        saveScenarioBtn.addEventListener('click', handleSaveScenario);
        micBtn.addEventListener('click', handleMicClick);

        // --- Initial Load ---
        window.onload = () => {
            if (!recognition) {
                micBtn.disabled = true;
                micBtn.title = "お使いのブラウザは音声認識に対応していません。";
            }
            loadCustomScenarios();
            renderScenarios();
            showScreen('scenarioSelect');
        };

    </script>
</body>
</html>
